#N canvas 476 60 769 564 12;
#X declare -path else;
#X obj 132 430 /~ 16;
#X obj 132 460 *~;
#X obj 243 420 decay2~ 100 6000;
#X obj 243 355 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 132 488 out~;
#X obj 243 327 tempo 30 100 -on;
#X msg 565 395 all bang;
#X obj 565 465 out~;
#X obj 565 322 tempo 30 100;
#X obj 565 258 loadbang;
#X obj 565 288 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 29 25 The concept of Additive Synthesis is to generate complex waveforms or rich sounds and textures by the sum of different oscillators., f 59;
#X text 29 74 We have seen this principle in action with "sinesum" and the generation of sawtooth waves \, for instance. We were just using one single wavetable oscillator but this also counts as an additive synthesis example because the waveforms were generated by the sum of sine wave components., f 59;
#N canvas 226 23 692 696 oscillators 0;
#X obj 94 183 osc~;
#X obj 94 206 throw~ \$0-osc;
#X obj 224 183 osc~;
#X floatatom 268 182 0 0 0 0 - - - 0;
#X obj 224 206 throw~ \$0-osc;
#X obj 224 134 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 349 182 osc~;
#X floatatom 393 181 0 0 0 0 - - - 0;
#X obj 349 205 throw~ \$0-osc;
#X obj 349 133 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 477 182 osc~;
#X floatatom 521 181 0 0 0 0 - - - 0;
#X obj 477 205 throw~ \$0-osc;
#X obj 477 133 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 94 293 osc~;
#X floatatom 138 292 0 0 0 0 - - - 0;
#X obj 94 316 throw~ \$0-osc;
#X obj 94 244 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 224 293 osc~;
#X floatatom 268 292 0 0 0 0 - - - 0;
#X obj 224 316 throw~ \$0-osc;
#X obj 224 244 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 349 292 osc~;
#X floatatom 393 291 0 0 0 0 - - - 0;
#X obj 349 315 throw~ \$0-osc;
#X obj 349 243 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 477 292 osc~;
#X floatatom 521 291 0 0 0 0 - - - 0;
#X obj 477 315 throw~ \$0-osc;
#X obj 477 243 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 97 400 osc~;
#X floatatom 141 399 0 0 0 0 - - - 0;
#X obj 97 423 throw~ \$0-osc;
#X obj 97 351 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 227 400 osc~;
#X floatatom 271 399 0 0 0 0 - - - 0;
#X obj 227 423 throw~ \$0-osc;
#X obj 227 351 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 352 399 osc~;
#X floatatom 396 398 0 0 0 0 - - - 0;
#X obj 352 422 throw~ \$0-osc;
#X obj 352 350 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 480 399 osc~;
#X floatatom 524 398 0 0 0 0 - - - 0;
#X obj 480 422 throw~ \$0-osc;
#X obj 480 350 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 97 510 osc~;
#X floatatom 141 509 0 0 0 0 - - - 0;
#X obj 97 533 throw~ \$0-osc;
#X obj 97 461 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 227 510 osc~;
#X floatatom 271 509 0 0 0 0 - - - 0;
#X obj 227 533 throw~ \$0-osc;
#X obj 227 461 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 352 509 osc~;
#X floatatom 396 508 0 0 0 0 - - - 0;
#X obj 352 532 throw~ \$0-osc;
#X obj 352 460 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 480 509 osc~;
#X floatatom 524 508 0 0 0 0 - - - 0;
#X obj 480 532 throw~ \$0-osc;
#X obj 480 460 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 94 133 bng 15 250 50 0 empty \$0-bng empty 17 7 0 10 #dcdcdc #000000 #000000;
#X floatatom 136 184 0 0 0 0 - - - 0;
#X obj 289 604 catch~ \$0-osc;
#X obj 289 635 outlet~;
#X obj 274 26 inlet;
#X obj 274 55 s \$0-bng;
#X obj 94 156 rand.i 200 1500;
#X obj 224 157 rand.i 200 1500;
#X obj 349 155 rand.i 200 1500;
#X obj 477 155 rand.i 200 1500;
#X obj 476 265 rand.i 200 1500;
#X obj 349 265 rand.i 200 1500;
#X obj 224 266 rand.i 200 1500;
#X obj 94 266 rand.i 200 1500;
#X obj 97 373 rand.i 200 1500;
#X obj 227 373 rand.i 200 1500;
#X obj 352 372 rand.i 200 1500;
#X obj 480 372 rand.i 200 1500;
#X obj 480 481 rand.i 200 1500;
#X obj 352 482 rand.i 200 1500;
#X obj 227 483 rand.i 200 1500;
#X obj 96 483 rand.i 200 1500;
#X connect 0 0 1 0;
#X connect 2 0 4 0;
#X connect 5 0 69 0;
#X connect 6 0 8 0;
#X connect 9 0 70 0;
#X connect 10 0 12 0;
#X connect 13 0 71 0;
#X connect 14 0 16 0;
#X connect 17 0 75 0;
#X connect 18 0 20 0;
#X connect 21 0 74 0;
#X connect 22 0 24 0;
#X connect 25 0 73 0;
#X connect 26 0 28 0;
#X connect 29 0 72 0;
#X connect 30 0 32 0;
#X connect 33 0 76 0;
#X connect 34 0 36 0;
#X connect 37 0 77 0;
#X connect 38 0 40 0;
#X connect 41 0 78 0;
#X connect 42 0 44 0;
#X connect 45 0 79 0;
#X connect 46 0 48 0;
#X connect 49 0 83 0;
#X connect 50 0 52 0;
#X connect 53 0 82 0;
#X connect 54 0 56 0;
#X connect 57 0 81 0;
#X connect 58 0 60 0;
#X connect 61 0 80 0;
#X connect 62 0 68 0;
#X connect 64 0 65 0;
#X connect 66 0 67 0;
#X connect 68 0 0 0;
#X connect 68 0 63 0;
#X connect 69 0 3 0;
#X connect 69 0 2 0;
#X connect 70 0 7 0;
#X connect 70 0 6 0;
#X connect 71 0 11 0;
#X connect 71 0 10 0;
#X connect 72 0 27 0;
#X connect 72 0 26 0;
#X connect 73 0 23 0;
#X connect 73 0 22 0;
#X connect 74 0 19 0;
#X connect 74 0 18 0;
#X connect 75 0 15 0;
#X connect 75 0 14 0;
#X connect 76 0 31 0;
#X connect 76 0 30 0;
#X connect 77 0 35 0;
#X connect 77 0 34 0;
#X connect 78 0 39 0;
#X connect 78 0 38 0;
#X connect 79 0 43 0;
#X connect 79 0 42 0;
#X connect 80 0 59 0;
#X connect 80 0 58 0;
#X connect 81 0 55 0;
#X connect 81 0 54 0;
#X connect 82 0 51 0;
#X connect 82 0 50 0;
#X connect 83 0 47 0;
#X connect 83 0 46 0;
#X restore 132 401 pd oscillators;
#X text 29 260 Below we have an example with 16 oscillators with random frequencies from 200 Hz and 1500 Hz. We divide by 16 as a gain compensation. See [pd oscillators] for more details., f 59;
#X text 438 426 click and open =>;
#X text 501 67 It is also quite useful and convenient to use the [clone] object in this case., f 32;
#X text 501 118 Below we have the same example implemented in [clone] \, where an abstraction called osc.pd is loaded 16 times., f 32;
#X text 501 184 Each instance of osc generates a random frequency when receiving a bang. Open the abstraction for more details., f 32;
#X obj 565 426 clone 16 osc 16;
#X obj 595 25 declare -path else;
#X text 29 166 The problem is that this process is limited \, as we cannot change the initial phase of the sine wave components and we can only have harmonic partials. Like in the last example \, we need a group of oscillators for more versatility and independent control of each oscillator's parameters. And this is what makes a nice Additive Synthesis patch.;
#X obj 565 355 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 13 0;
#X connect 3 0 2 0;
#X connect 5 0 3 0;
#X connect 6 0 19 0;
#X connect 8 0 22 0;
#X connect 9 0 10 0;
#X connect 10 0 8 0;
#X connect 13 0 0 0;
#X connect 19 0 7 0;
#X connect 22 0 6 0;
