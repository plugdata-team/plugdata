#N canvas 288 23 857 723 12;
#X declare -path else;
#X obj 481 58 cnv 15 298 138 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-PM-fb 375 float 0;
#X coords 0 1 374 -1 300 140 1 0 0;
#X restore 480 57 graph;
#X text 464 55 1;
#X text 458 179 -1;
#X text 463 120 0;
#X obj 483 240 cnv 15 298 138 empty empty empty 20 12 0 14 #b8b8b8 #404040 0;
#N canvas 0 22 478 328 (subpatch) 0;
#X array \$0-Spectrum 128 float 0;
#X coords 0 1024 127 0 300 140 1 0 0;
#X restore 482 239 graph;
#X text 574 379 500Hz;
#X text 521 378 250Hz;
#X text 481 378 50Hz;
#X text 629 378 750Hz;
#X text 688 378 1KHz;
#X text 733 379 1.25KHz;
#X obj 169 181 hsl 128 15 0 1 0 0 empty fb empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 166 208 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 94 181 nbx 5 14 -1e+37 1e+37 0 0 empty Hz empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 74 179 Hz;
#N canvas 265 104 723 329 pm-fb 0;
#X obj 96 275 outlet~;
#X obj 128 139 *~;
#X obj 113 205 cnv 15 120 40 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
#X obj 124 69 cnv 15 145 40 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
#X obj 287 69 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 55 119 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 55 38 inlet;
#X obj 287 38 inlet;
#X obj 268 159 block~ 1;
#X obj 287 100 f2s~ 10;
#X text 343 70 index;
#X text 28 120 Hz;
#X text 184 151 block size of 1 sample, f 11;
#X obj 117 217 send~ \$0-pm-fb;
#X obj 128 80 receive~ \$0-pm-fb;
#X obj 96 167 sine~;
#X text 403 40 The native [send~] object connects to a [receive~] earlier in the chain and forms a feedback loop., f 42;
#X text 403 90 As already mentioned very early in this tutorial \, this generates a delay of one block \, so the [receive~] object ouputs the last block of audio. In this case \, the block is composed of only 1 sample (see the [block~ 1] object) \, hence there's a single sample delay feedback., f 42;
#X text 403 196 Note that this single sample delay implies a time delay that is dependent on the sample rate. So if you cange the sample rate you also change the delay time and this affects the sound result., f 42;
#X connect 1 0 15 2;
#X connect 4 0 9 0;
#X connect 5 0 15 0;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X connect 9 0 1 1;
#X connect 14 0 1 0;
#X connect 15 0 0 0;
#X connect 15 0 13 0;
#X restore 94 208 pd pm-fb;
#N canvas 227 235 287 308 gain 0;
#X obj 77 215 *~;
#X obj 65 247 dac~;
#X obj 106 185 line~;
#X msg 106 159 \$1 10;
#X obj 106 133 pow 4;
#X obj 77 61 inlet~;
#X obj 109 105 hsl 100 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#N canvas 368 23 325 231 plot 0;
#X obj 66 32 inlet~;
#X obj 101 102 metro 200;
#X obj 101 70 loadbang;
#N canvas 610 140 303 362 FFT 0;
#X obj 66 29 inlet~;
#X obj 67 108 rfft~;
#X obj 105 160 loadbang;
#X obj 75 210 metro 250;
#X obj 75 189 tgl 15 0 empty empty empty 0 -6 0 8 #fcfcfc #000000 #000000 0 1;
#X obj 174 113 block~ 4096;
#X obj 67 147 mag~;
#X obj 66 238 tabwrite~ \$0-Spectrum-filtered;
#X obj 67 74 hann~;
#X connect 0 0 8 0;
#X connect 1 0 6 0;
#X connect 1 1 6 1;
#X connect 2 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 6 0 7 0;
#X connect 8 0 1 0;
#X restore 66 165 pd FFT;
#X obj 85 130 tabwrite~ \$0-PM-fb-filtered;
#X connect 0 0 3 0;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 1 0;
#X restore 15 159 pd plot;
#X obj 174 162 loadbang;
#X msg 174 194 \; fb 0.01 \; Hz 200;
#X text 146 104 gain;
#X connect 0 0 1 0;
#X connect 0 0 1 1;
#X connect 2 0 0 1;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 0 0;
#X connect 5 0 7 0;
#X connect 6 0 4 0;
#X connect 8 0 9 0;
#X coords 0 -1 1 1 120 25 2 100 100;
#X restore 95 508 pd gain;
#X obj 482 443 cnv 15 298 138 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-PM-fb-filtered 375 float 0;
#X coords 0 1 374 -1 300 140 1 0 0;
#X restore 481 442 graph;
#X text 465 440 1;
#X text 459 564 -1;
#X text 464 505 0;
#X obj 484 605 cnv 15 298 138 empty empty empty 20 12 0 14 #b8b8b8 #404040 0;
#N canvas 0 22 478 328 (subpatch) 0;
#X array \$0-Spectrum-filtered 128 float 0;
#X coords 0 1024 127 0 300 140 1 0 0;
#X restore 483 604 graph;
#X text 575 744 500Hz;
#X text 522 743 250Hz;
#X text 482 743 50Hz;
#X text 630 743 750Hz;
#X text 689 743 1KHz;
#X text 734 744 1.25KHz;
#X obj 240 447 hsl 128 15 0 1 0 1 empty fb empty -2 -8 0 10 #dcdcdc #000000 #000000 127 1;
#X obj 237 474 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 95 447 nbx 5 14 -1e+37 1e+37 0 0 empty Hz empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 71 446 Hz;
#N canvas 227 235 256 295 gain 0;
#X obj 77 215 *~;
#X obj 65 247 dac~;
#X obj 106 185 line~;
#X msg 106 159 \$1 10;
#X obj 106 133 pow 4;
#X obj 77 61 inlet~;
#X obj 109 105 hsl 100 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#N canvas 368 23 325 231 plot 0;
#X obj 66 32 inlet~;
#X obj 123 99 metro 200;
#X obj 123 65 loadbang;
#N canvas 610 140 303 296 FFT 0;
#X obj 62 32 inlet~;
#X obj 63 111 rfft~;
#X obj 104 156 loadbang;
#X obj 71 202 metro 250;
#X obj 71 181 tgl 15 0 empty empty empty 0 -6 0 8 #fcfcfc #000000 #000000 0 1;
#X obj 170 116 block~ 4096;
#X obj 62 230 tabwrite~ \$0-Spectrum;
#X obj 63 139 mag~;
#X obj 63 77 hann~;
#X connect 0 0 8 0;
#X connect 1 0 7 0;
#X connect 1 1 7 1;
#X connect 2 0 4 0;
#X connect 3 0 6 0;
#X connect 4 0 3 0;
#X connect 7 0 6 0;
#X connect 8 0 1 0;
#X restore 66 163 pd FFT;
#X obj 123 133 tabwrite~ \$0-PM-fb;
#X connect 0 0 3 0;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 1 0;
#X restore 15 159 pd plot;
#X text 137 104 gain;
#X connect 0 0 1 0;
#X connect 0 0 1 1;
#X connect 2 0 0 1;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 0 0;
#X connect 5 0 7 0;
#X connect 6 0 4 0;
#X coords 0 -1 1 1 120 25 2 100 100;
#X restore 94 238 pd gain;
#X text 183 180 feedback index;
#X text 256 446 feedback index;
#N canvas 454 222 651 396 pm-fb-filtered 0;
#X obj 110 331 outlet~;
#X obj 142 198 *~;
#X obj 291 168 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 59 191 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 59 60 inlet;
#X obj 291 60 inlet;
#X obj 140 152 cnv 15 80 30 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
#X obj 308 264 block~ 1;
#X obj 142 158 mov.avg~ 2;
#X text 221 151 mean filter, f 6;
#X obj 291 199 f2s~ 10;
#X obj 110 229 sine~;
#X text 303 149 index;
#X text 398 138 The only difference here is the [mov.avg~] object from ELSE. This is a filter that takes the average of two samples. More about this type of filter in the future sections on filters., f 27;
#X obj 131 264 s~ \$0-fb2;
#X obj 142 119 r~ \$0-fb2;
#X connect 1 0 11 2;
#X connect 2 0 10 0;
#X connect 3 0 11 0;
#X connect 4 0 3 0;
#X connect 5 0 2 0;
#X connect 8 0 1 0;
#X connect 10 0 1 1;
#X connect 11 0 0 0;
#X connect 11 0 14 0;
#X connect 15 0 8 0;
#X restore 95 474 pd pm-fb-filtered;
#X text 44 354 Here we use a simple mean average filter. The usage of this filter has been described in Yamaha patents and implemented in a few of their synths \, as well as in the FM8 software by Native Instruments. Open the subpatch below for more info., f 51;
#X obj 112 643 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 188 610 hsl 128 15 -1 1 0 1 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 6900 1;
#X obj 185 633 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 185 655 f2s~ 10;
#X obj 161 681 fbsine~ 440;
#X obj 161 716 out~;
#X text 90 642 Hz;
#X text 204 609 feedback index;
#X text 62 548 The ELSE library has the [fbsine~] object which implements a feedback phase modulation. It also includes a filter. Check help file for more details., f 47;
#X obj 645 18 declare -path else;
#X text 38 16 The output of an oscillator can modulate its own frequency or phase. We need a feedback loop for that \, where the output is fed back with a minimum delay. This minimum delay is of one sample and we need a block size of 1 to achieve it., f 53;
#X text 39 208 open =>;
#X text 44 273 It's quite noticeable that feedback generates lots of noise. This can be minimized by adding a filter in the feedback loop. Another possibility would be to use the oversampling and filtering technique for anti aliasing., f 51;
#X text 41 474 open =>;
#X text 38 91 We can change the block size in a subpatch with the [block~] object \, check [pd pm-fb] below and the graphs to the right. The feedback is implemented with [send~]/[receive~] objects., f 53;
#X obj 347 168 setdsp~;
#X connect 13 0 14 0;
#X connect 14 0 17 1;
#X connect 15 0 17 0;
#X connect 17 0 36 0;
#X connect 32 0 33 0;
#X connect 33 0 39 1;
#X connect 34 0 39 0;
#X connect 39 0 18 0;
#X connect 41 0 45 0;
#X connect 42 0 43 0;
#X connect 43 0 44 0;
#X connect 44 0 45 1;
#X connect 45 0 46 0;
