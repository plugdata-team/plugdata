#N struct 1004-point float x0 float y0 float xs float ys float fg float in float gridx float gridy;
#N canvas 460 39 611 596 12;
#X declare -path else;
#X obj 425 14 declare -path else;
#X obj 83 327 hsl 128 20 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 52 161 slider2d 100 100 0 127 0 127 1 200 200 200 0 0 0 0 0 0 60 40 empty empty;
#X obj 321 394 osc.route /slider;
#X obj 321 358 display;
#X msg 52 284 /slider/2d \$1 \$2;
#X obj 321 323 osc.receive 8002;
#X msg 80 365 /slider/amplitude/a \$1;
#X obj 103 402 hsl 128 20 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X msg 100 440 /slider/amplitude/b \$1;
#X obj 321 435 osc.route /amplitude;
#X obj 321 467 display;
#X obj 458 467 display;
#X obj 54 483 osc.send 8002;
#X text 38 49 ELSE provides simple and convenient OSC objects. You can use [osc.send] and [osc.receive] which are abstractions that already make network connections with [netsend]/[netreceive]. These abstraction also use different versions of the OSC format/parse objects from ELSE that allow direct messaging with proper OSC addresses. Moreover \, an [osc.route] object is provided to route OSC messages more conveniently., f 75;
#X text 211 145 [osc.send] takes address (optional) and port arguments \, while [osc.receive] takes a port argument. If they match \, they talk to each other. Note that addresses are specified with the "/" separator and how [osc.route] is able to break this kind of message and route it., f 50;
#X text 108 523 The OSC objects from ELSE are still simpler than the ones from mrpeach. More complexity and functionalities will be added to them eventually., f 55;
#X text 267 240 Check help files of each of these objects for more details \, specially [osc.route] for details on OSC address specifications and address management complexity., f 42;
#X connect 1 0 7 0;
#X connect 2 0 5 0;
#X connect 3 0 10 0;
#X connect 4 0 3 0;
#X connect 5 0 13 0;
#X connect 6 0 4 0;
#X connect 7 0 13 0;
#X connect 8 0 9 0;
#X connect 9 0 13 0;
#X connect 10 0 11 0;
#X connect 10 1 12 0;
