#N struct 1008-point float x0 float y0 float xs float ys float fg float in float gridx float gridy;
#N canvas 310 23 1056 723 12;
#X declare -path else;
#X obj 855 15 declare -path else;
#X obj 352 493 oscparse;
#X obj 352 525 display;
#X obj 352 681 display;
#X floatatom 236 440 5 0 0 0 - - - 0;
#X obj 198 533 netsend -u -b;
#X obj 196 348 initmess connect localhost 12001;
#X obj 352 466 netreceive -u -b 12001;
#X obj 236 470 oscformat hz;
#X obj 223 378 hsl 128 20 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 48 347 slider2d 100 100 0 127 0 127 1 200 200 200 0 0 0 0 0 0 0 0 empty empty;
#X obj 48 461 display;
#X obj 403 612 display;
#X obj 352 554 list trim;
#X obj 48 493 oscformat slider 2d;
#X obj 220 408 oscformat slider amplitude;
#X obj 352 582 route hz slider;
#X obj 464 682 display;
#X obj 403 648 route amplitude 2d;
#X obj 403 682 display 6;
#X text 40 187 In this example \, we'll set up some OSC messages with the native objects from Pure Data to send and receive them in the same patch. Here we connect it to the localhost of the machine in the port '12001'. We're using [netsend] and [netreceive] via UDP (note the '-u' flag) to transport raw bytes (see the '-b' flag) which is proper to send OSC data (see the help file for more info)., f 72;
#X text 153 684 routed received messages =>;
#X text 41 279 Pd Vanilla has the [oscformat] object to format OSC messages so they can be sent via the network. The arguments are the addresses that will be used for routing and retrieving the sent message., f 72;
#X text 113 581 let's route 'hz' and 'slider' ==>;
#X obj 724 480 netreceive -u -b;
#X obj 648 218 initmess connect 238.200.200.200 3005;
#X text 40 108 There are some hardware controllers that send OSC data and also mobile apps that you can design the GUI interface for the device's touchscreen. There are software (synths/DAWs) that can be controlled by OSC messages and real-time environments for sound and media like Pure Data \, MAX \, SuperCollider and Processing can send and receive OSC Data., f 72;
#X obj 687 348 oscformat -f ff note;
#X obj 687 254 keyboard 17 80 2 3 0 0 empty empty;
#X obj 724 510 oscparse;
#X obj 724 542 list trim;
#X obj 724 571 display;
#X obj 724 443 initmess listen 3005 238.200.200.200;
#X text 588 54 What needs to be clear is that the sent message is received via network connections. So you can receive this in your computer on another Pd patch \, another instance of Pd \, another software (such as MAX) and also wherever in another computer via UDP/IP.;
#X text 590 131 Here's an example using the IP address. Note that now we also have a flag to specify the data type being sent ('ff' means it's two floats) \, this may be necessary in some cases to properly retrieve the data.;
#X obj 649 421 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 649 390 netsend -u -b;
#X text 40 15 Open Sound Control (OSC) is a protocol whose messages run via UDP/IP and Ethernet. As an alternative to MIDI \, OSC has a higher resolution. Let's remember how MIDI works with a 7 bits resolution. OSC works with floats and you can specify any parameter name to customize it to your needs as you wish \, unlike MIDI that has fixed messages such as 'note on/off' \, 'control change' etc., f 72;
#X text 82 634 another [route] object further routes "amplitude" and "2d", f 30;
#X text 273 648 ================>;
#X text 599 613 These vanilla objects are pretty basic and can help in more simple tasks. It doesn't handle timestamps and bundles \, for instance. If you need a more proper implementation of the OSC protocol you can try the available objects in the 'mrpeach' library (like [packOSC] and [routeOSC]). ELSE provides more convenient alternatives shown in the next example., f 61;
#X connect 1 0 2 0;
#X connect 2 0 13 0;
#X connect 4 0 8 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 8 0 5 0;
#X connect 9 0 15 0;
#X connect 10 0 11 0;
#X connect 11 0 14 0;
#X connect 12 0 18 0;
#X connect 13 0 16 0;
#X connect 14 0 5 0;
#X connect 15 0 5 0;
#X connect 16 0 3 0;
#X connect 16 1 12 0;
#X connect 18 0 19 0;
#X connect 18 1 17 0;
#X connect 24 0 29 0;
#X connect 25 0 36 0;
#X connect 27 0 36 0;
#X connect 28 0 27 0;
#X connect 29 0 30 0;
#X connect 30 0 31 0;
#X connect 32 0 24 0;
#X connect 36 0 35 0;
