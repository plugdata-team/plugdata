#N canvas 366 33 891 580 12;
#X declare -path else;
#N canvas 308 211 308 379 voice1 0;
#X obj 126 282 *~;
#X obj 71 132 mtof;
#X floatatom 71 162 5 0 0 0 - - - 0;
#X obj 71 43 inlet;
#X obj 71 74 unpack;
#X floatatom 144 107 5 0 0 0 - - - 0;
#X floatatom 71 105 5 0 0 0 - - - 0;
#X obj 71 197 bl.saw~;
#X obj 144 244 adsr~ 10 10 0.5 50;
#X obj 126 314 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 8 0;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X connect 8 0 0 1;
#X restore 176 406 pd voice1;
#X obj 54 336 /~ 4;
#X obj 176 308 voices 4 1;
#X obj 54 370 out~;
#X obj 54 308 catch~ \$0-voice;
#X obj 176 179 keyboard 17 80 2 4 0 0 empty empty;
#X obj 176 118 bng 18 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 102 120 notein;
#X obj 102 151 pack;
#X obj 301 533 poly;
#N canvas 470 55 457 368 random_chords 0;
#X obj 174 309 outlet;
#X obj 62 32 inlet;
#X obj 146 242 makenote;
#X obj 218 139 expr $f1 + random(2 \, 5);
#X obj 218 174 expr $f1 + random(2 \, 5);
#X obj 218 208 expr $f1 + random(2 \, 5);
#X obj 62 66 expr random(60 \, 72) \; random(90 \, 127) \; random(500 \, 1000);
#X obj 174 272 pack;
#X connect 1 0 6 0;
#X connect 2 0 7 0;
#X connect 2 1 7 1;
#X connect 3 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 4 0 2 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 6 0 3 0;
#X connect 6 1 2 1;
#X connect 6 2 2 2;
#X connect 7 0 0 0;
#X restore 176 151 pd random_chords;
#X text 199 118 <= generate random chords if you don't have a controller, f 29;
#X text 683 414 <= click;
#X text 233 533 see also:;
#X obj 535 446 plate.rev~ 50 0.6 0.25 0.8 0.8, f 16;
#X obj 721 26 declare -path else;
#X obj 542 492 out~;
#X text 46 20 The [voices] object \, from ELSE \, manages polyphony. The first argument is the number of voices it handles and each voice is routed to a different output. Here we have a 4 voice polyphonic patch and each voice is implemented in a different subpatch., f 52;
#X text 51 441 The seconrd argument is a "voice stealing" flag \, which replaces the last pressed note if you press more notes than it can handle. This object was inspired by Pd's native [poly] object \, but [voices] brings more functionalities and it's more convenient., f 54;
#X text 467 61 The native [clone] object loads an abstraction multiple times \, which is quite useful for polyphony. When [clone] receives list messages \, the first number element is the number of the abstraction \, so it routes the rest of the message to that instance. The [voices] object can have a list output where the first number is the voice number (and the second and third third are: pitch/velocity) \, so you can just directly connect it to [clone]., f 56;
#X text 467 186 The first number argument of clone is the number of instances it loads from an abstraction. The second is the patch file name to load. We included a third argument \, which is equal to the number of instances to make a volume compensation inside the patch., f 56;
#X obj 535 414 clone 4 voice-abs 4;
#X text 467 268 Click on the [clone] object to open the abstraction. Check its help file \, and also check the help file of [voices]. The loaded abstraction (voices-abs.pd) is available in the same folder of this series of examples., f 56;
#X obj 535 377 voices -list 4 1;
#N canvas 308 211 308 379 voice1 0;
#X obj 126 282 *~;
#X obj 71 132 mtof;
#X floatatom 71 162 5 0 0 0 - - - 0;
#X obj 71 43 inlet;
#X obj 71 74 unpack;
#X floatatom 144 107 5 0 0 0 - - - 0;
#X floatatom 71 105 5 0 0 0 - - - 0;
#X obj 71 197 bl.saw~;
#X obj 144 244 adsr~ 10 10 0.5 50;
#X obj 126 314 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 8 0;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X connect 8 0 0 1;
#X restore 192 382 pd voice1;
#N canvas 308 211 308 379 voice1 0;
#X obj 126 282 *~;
#X obj 71 132 mtof;
#X floatatom 71 162 5 0 0 0 - - - 0;
#X obj 71 43 inlet;
#X obj 71 74 unpack;
#X floatatom 144 107 5 0 0 0 - - - 0;
#X floatatom 71 105 5 0 0 0 - - - 0;
#X obj 71 197 bl.saw~;
#X obj 144 244 adsr~ 10 10 0.5 50;
#X obj 126 314 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 8 0;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X connect 8 0 0 1;
#X restore 209 356 pd voice1;
#N canvas 308 211 308 379 voice1 0;
#X obj 126 282 *~;
#X obj 71 132 mtof;
#X floatatom 71 162 5 0 0 0 - - - 0;
#X obj 71 43 inlet;
#X obj 71 74 unpack;
#X floatatom 144 107 5 0 0 0 - - - 0;
#X floatatom 71 105 5 0 0 0 - - - 0;
#X obj 71 197 bl.saw~;
#X obj 144 244 adsr~ 10 10 0.5 50;
#X obj 126 314 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 8 0;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X connect 8 0 0 1;
#X restore 226 332 pd voice1;
#X connect 1 0 3 0;
#X connect 2 0 0 0;
#X connect 2 1 24 0;
#X connect 2 2 25 0;
#X connect 2 3 26 0;
#X connect 4 0 1 0;
#X connect 5 0 2 0;
#X connect 5 0 23 0;
#X connect 6 0 10 0;
#X connect 7 0 8 0;
#X connect 7 1 8 1;
#X connect 8 0 5 0;
#X connect 10 0 5 0;
#X connect 14 0 16 0;
#X connect 14 1 16 1;
#X connect 21 0 14 0;
#X connect 23 0 21 0;
