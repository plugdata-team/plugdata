#N canvas 461 39 752 645 12;
#X declare -path else;
#X obj 241 484 *~;
#X obj 259 364 vline~;
#X obj 139 223 t f f;
#X obj 139 278 pack;
#X obj 180 399 osc~ 440;
#X obj 241 526 out~;
#X obj 139 39 tgl 18 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X msg 369 304 250;
#X msg 332 304 100;
#X text 290 303 decay;
#X text 394 303 release;
#X obj 139 70 trigger float float, f 28;
#X obj 139 195 float;
#X obj 332 353 expr 1000./$f1;
#X text 497 418 attack;
#X obj 259 446 slop~ 1e+09, f 18;
#X obj 382 388 loadbang;
#X obj 382 417 expr 1000./150.;
#X text 41 264 gate/sustain values =====>, f 13;
#X obj 530 51 declare -path else;
#X msg 139 304 \$1 \, \$2 0 150;
#X msg 259 304 0;
#X obj 174 492 s2f~;
#X obj 174 522 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 171 249 * 0.75;
#X obj 139 97 != 0;
#X obj 139 125 select 1 0;
#X obj 456 239 adsr~ 150 100 0.75 250;
#X text 390 94 Here's how to implement an ADSR exponential envelope with vanilla. We use again the [slop~] object for that. We need to calculate the sustain point from the gate input value and also take care to set different downward periods for the decay and release part. The patch to the left relates to the [adsr~] object with the parameters below., f 43;
#X connect 0 0 5 0;
#X connect 1 0 15 0;
#X connect 2 0 3 0;
#X connect 2 1 24 0;
#X connect 3 0 20 0;
#X connect 4 0 0 0;
#X connect 6 0 11 0;
#X connect 7 0 13 0;
#X connect 8 0 13 0;
#X connect 11 0 25 0;
#X connect 11 1 12 1;
#X connect 12 0 2 0;
#X connect 13 0 15 3;
#X connect 15 0 0 1;
#X connect 15 0 22 0;
#X connect 16 0 17 0;
#X connect 17 0 15 5;
#X connect 20 0 1 0;
#X connect 21 0 1 0;
#X connect 22 0 23 0;
#X connect 24 0 3 1;
#X connect 25 0 26 0;
#X connect 26 0 12 0;
#X connect 26 0 8 0;
#X connect 26 1 21 0;
#X connect 26 1 7 0;
