#N canvas 347 41 750 645 12;
#X declare -path else;
#X text 256 536 For a lower level implementation of a markov chain with the [text] object \, see the subpatch below. The [markov] object actually uses a different algorithm. The subpacth also has an example that reads a MIDI File., f 56;
#N canvas 371 107 995 639 [text] 0;
#X obj 116 184 stripnote;
#X obj 514 188 tgl 18 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 514 241 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 288 282 clear;
#X obj 116 152 note.in;
#X msg 116 24 open;
#X obj 451 398 list length;
#X obj 451 422 t b f;
#X obj 711 495 *~;
#X obj 690 426 mtof;
#X obj 690 457 tri~;
#X obj 711 566 out~;
#X obj 690 270 keyboard 17 80 2 4 0 0 empty empty;
#X obj 690 368 unpack;
#X obj 812 240 makenote 127 300;
#X obj 729 426 adsr~ 50 10 0.7 100;
#X obj 711 529 plate.rev~ 50 0.6 0.25 0.8 0.5;
#X obj 137 249 lastvalue;
#X obj 116 215 trigger float float;
#X obj 137 283 pack float float;
#X obj 144 89 trigger anything bang;
#X obj 261 205 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 626 250 display;
#X obj 272 508 s \$0-1st-pitch;
#X obj 505 584 s \$0-next-pitch;
#X obj 626 186 r \$0-next-pitch;
#X obj 812 211 r \$0-next-pitch;
#X obj 288 254 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X msg 256 552 1e+09;
#X obj 152 587 text set \$0-Matrix;
#X obj 288 313 text define \$0-Matrix;
#X f 11;
#X msg 272 482 \$1;
#X obj 95 423 t f f, f 11;
#X obj 137 311 t l l, f 14;
#X obj 40 423 sel -1;
#X obj 40 497 t b b;
#X obj 209 552 list;
#X obj 95 453 text get \$0-Matrix, f 9;
#X obj 95 496 list append;
#X obj 261 363 text size \$0-Matrix;
#X obj 261 393 t b f;
#X obj 272 457 text get \$0-Matrix;
#X obj 272 426 rand.i;
#X obj 514 214 tempo 120 50;
#X obj 637 214 r \$0-1st-pitch;
#X obj 311 393 - 1;
#X text 187 60 <= read/analyze;
#X obj 40 377 text search \$0-Matrix, f 11;
#X obj 514 293 text search \$0-Matrix;
#X obj 521 495 swap;
#X obj 451 355 text get \$0-Matrix, f 9;
#X obj 518 429 - 1;
#X obj 505 553 display;
#X obj 505 527 text get \$0-Matrix;
#X obj 451 461 rand.i 1 1;
#X obj 514 323 t f f;
#X obj 514 265 float;
#X obj 137 341 unpack f f;
#X msg 144 60 dump;
#X text 373 322 <= click;
#X obj 116 121 midi bday.mid;
#X text 332 26 This patch reads a MIDI file and stores the notes in a [text] object. The storage takes into account the preceding note. Click on the [text] define object and see how we have a row for acch note and the list that follows are the notes that come after the first note is played. We then get the size of the [text] (number of lines actually) and get a random value from it., f 88;
#X text 538 187 <= start;
#X text 329 420 get 1st pitch;
#X text 332 103 When we start \, we get the current pitch and search for it in the [text] so we find the line it belongs to. Then we get the list length and randomly pick one of its elements. Since repeated notes are stored more than once \, they have a different weight. the chosen pitch is stored for the next round., f 88;
#X connect 0 0 18 0;
#X connect 1 0 43 0;
#X connect 2 0 56 0;
#X connect 3 0 30 0;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 60 0;
#X connect 6 0 7 0;
#X connect 7 0 54 0;
#X connect 7 1 51 0;
#X connect 8 0 16 0;
#X connect 9 0 10 0;
#X connect 10 0 8 0;
#X connect 12 0 13 0;
#X connect 13 0 9 0;
#X connect 13 1 15 0;
#X connect 14 0 12 0;
#X connect 14 1 12 1;
#X connect 15 0 8 1;
#X connect 16 0 11 0;
#X connect 17 0 19 0;
#X connect 18 0 17 0;
#X connect 18 1 19 1;
#X connect 19 0 33 0;
#X connect 20 0 60 0;
#X connect 20 1 27 0;
#X connect 21 0 39 0;
#X connect 22 0 56 1;
#X connect 25 0 22 0;
#X connect 26 0 14 0;
#X connect 27 0 3 0;
#X connect 27 0 17 1;
#X connect 28 0 29 1;
#X connect 31 0 23 0;
#X connect 32 0 37 0;
#X connect 32 1 29 1;
#X connect 33 0 57 0;
#X connect 33 1 36 1;
#X connect 34 0 35 0;
#X connect 34 1 32 0;
#X connect 35 0 36 0;
#X connect 35 1 28 0;
#X connect 36 0 29 0;
#X connect 37 0 38 0;
#X connect 38 0 29 0;
#X connect 39 0 40 0;
#X connect 40 0 42 0;
#X connect 40 1 45 0;
#X connect 41 0 31 0;
#X connect 42 0 41 0;
#X connect 43 0 2 0;
#X connect 44 0 22 0;
#X connect 45 0 42 2;
#X connect 47 0 34 0;
#X connect 48 0 55 0;
#X connect 49 0 53 0;
#X connect 49 1 53 1;
#X connect 50 0 6 0;
#X connect 51 0 54 2;
#X connect 52 0 24 0;
#X connect 53 0 52 0;
#X connect 54 0 49 0;
#X connect 55 0 50 0;
#X connect 55 1 49 1;
#X connect 56 0 48 0;
#X connect 57 0 47 0;
#X connect 57 1 38 1;
#X connect 58 0 20 0;
#X connect 60 0 4 0;
#X connect 60 1 21 0;
#X restore 581 595 pd [text];
#X obj 65 294 stripnote;
#X msg 65 153 open;
#X msg 227 263 clear;
#X obj 286 254 tgl 25 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 83 209 trigger anything bang;
#X msg 83 181 dump;
#X msg 153 264 create;
#X obj 147 432 else/keyboard 17 80 2 4 0 0 empty empty;
#X obj 227 403 makenote 127 300, f 22;
#X floatatom 295 361 3 1 5 0 - - - 0;
#X text 320 361 order;
#X msg 65 318 learn \$1;
#X text 97 20 This example creates a monophonic chain from MIDI input. Here you can also try to increase the order. An order of "2" means that the next note depends on the preceding two values. This makes it a lot less random \, so the more you increase the order \, the more it looks like the original input. After changing the order you need to recreate the chain. For this happy birthday example \, an order of 5 outputs the original tune., f 75;
#X text 119 181 <-- read/analyze;
#X text 100 152 <-- open another midi file;
#X text 317 256 <-- play;
#X obj 286 291 tempo 120 50;
#X obj 65 259 note.in;
#X obj 65 235 midi bday.mid;
#X obj 227 368 markov;
#X obj 295 330 initmess 1;
#X obj 472 367 *~;
#X obj 423 308 mtof;
#X obj 472 422 out~;
#X obj 423 282 unpack f f;
#X obj 423 337 bl.tri~;
#X obj 490 337 adsr~ 50 10 0.7 100;
#X obj 472 394 plate.rev~ 50 0.6 0.25 0.8 0.5;
#X obj 470 147 declare -path else;
#X obj 147 526 s \$0-note;
#X obj 423 217 r \$0-note;
#X listbox 423 250 14 0 0 0 - - - 0;
#X connect 2 0 13 0;
#X connect 3 0 20 0;
#X connect 4 0 21 0;
#X connect 5 0 18 0;
#X connect 6 0 20 0;
#X connect 6 1 4 0;
#X connect 7 0 6 0;
#X connect 8 0 21 0;
#X connect 9 0 31 0;
#X connect 10 0 9 0;
#X connect 10 1 9 1;
#X connect 11 0 21 2;
#X connect 13 0 21 0;
#X connect 18 0 21 0;
#X connect 19 0 2 0;
#X connect 19 1 2 1;
#X connect 20 0 19 0;
#X connect 20 1 8 0;
#X connect 21 0 10 0;
#X connect 22 0 11 0;
#X connect 23 0 29 0;
#X connect 24 0 27 0;
#X connect 26 0 24 0;
#X connect 26 1 28 0;
#X connect 27 0 23 0;
#X connect 28 0 23 1;
#X connect 29 0 25 0;
#X connect 32 0 33 0;
#X connect 33 0 26 0;
