#N struct 1003-DS float x float y array 1003-table 1003-element;
#N struct 1003-element symbol sym float y;
#N canvas 329 23 603 651 12;
#X obj 479 329 pointer;
#N canvas 317 275 503 265 template 0;
#X text 91 183 Drawing instructions;
#X obj 59 127 struct \$0-DS float x float y array \$0-table \$0-element
;
#X text 73 46 Data Structure named "\$0-DS" holding coordinates floats
"x/y" and an array named "\$0-table" using the element struct named
"\$0-element" defined in the other subpatch., f 48;
#X obj 243 184 plot \$0-table 900 2 10 -50 120;
#X restore 391 117 pd template;
#X obj 370 359 append \$0-DS x y;
#X msg 40 314 n \, dump;
#X obj 40 440 t s b;
#X obj 250 382 + 1;
#X obj 219 382 f;
#X obj 238 474 array size -s \$0-DS \$0-table;
#X text 265 449 <= sets size;
#X floatatom 238 448 3 0 0 0 - - - 0;
#X obj 219 411 element \$0-DS \$0-table;
#X msg 237 357 0;
#X text 100 313 <= click;
#N canvas 511 186 854 235 \$0-display 1;
#X scalar 1003-DS 10 250 \; symbol 0 \; \;;
#X coords 0 235 1 234 0 0 0;
#X restore 391 143 pd \$0-display;
#X obj 80 98 initmess \; pd-\$0-display clear \, vis 1 \; \$0-pointer
traverse pd-\$0-display \, bang \; \$0-coords 10 250;
#X obj 479 299 r \$0-pointer;
#X obj 370 318 r \$0-coords;
#N canvas 431 307 458 362 \$0-element 0;
#X obj 59 224 filledpolygon 0 0 1 -2 -2 2 -2 2 2 -2 2;
#X text 58 194 draw a black dot to represent the value:;
#X obj 202 286 drawsymbol sym 0 -5;
#X text 58 268 We add a drawing instruction for it as well, f 17;
#X text 41 68 We also include the field name 'y' \, which is the vertical
coordinate. This allows the element to be dragged horizontally., f
48;
#X text 42 15 The element of the array is defined as a struct of name
"\$0-element" containing a symbol named "sym"., f 47;
#X obj 86 139 struct \$0-element symbol sym float y;
#X restore 391 91 pd \$0-element;
#X obj 40 474 set -symbol \$0-element sym;
#X obj 108 374 t f b;
#X text 34 186 When loading the array \, we have only one element \,
not initialized. With the [dir] object from ELSE \, we get the file
names contained in this folder and insert them into the array. The
'n' message sends the number of files in the folder to the right outlet
\, which we use to set the array's size. Then \, the dump message sends
a series of symbols with the file names that we use to populate the
array with the [element] and [set] objects., f 75;
#X symbolatom 352 608 21 0 0 0 - - - 0;
#X obj 352 543 element \$0-DS \$0-table, f 26;
#X obj 352 513 hradio 15 1 0 7 empty empty empty 0 -8 0 10 #dfdfdf
#000000 #000000 0;
#X obj 352 578 get \$0-element sym y, f 23;
#X floatatom 510 608 5 0 0 0 - - - 0;
#X text 28 528 To set a symbol \, the [set] object needs a -symbol
flag! You can now use the [get] object to get both the symbol value
and the 'y' value from pointers given by the [element] object., f
42;
#X obj 40 346 dir -ext pd ../;
#X text 43 24 This example shows how to create include a symbol field
in your array. In this case \, the [array] object can't be used instead
of [element] and [set]. But we can still use [array] instead of [setsize]/[getsize].
, f 72;
#X connect 0 0 2 2;
#X connect 2 0 7 1;
#X connect 2 0 10 1;
#X connect 2 0 22 1;
#X connect 3 0 27 0;
#X connect 4 0 18 0;
#X connect 4 1 6 0;
#X connect 5 0 6 1;
#X connect 6 0 5 0;
#X connect 6 0 10 0;
#X connect 9 0 7 0;
#X connect 10 0 18 1;
#X connect 11 0 6 1;
#X connect 15 0 0 0;
#X connect 16 0 2 0;
#X connect 19 0 9 0;
#X connect 19 1 11 0;
#X connect 22 0 24 0;
#X connect 23 0 22 0;
#X connect 24 0 21 0;
#X connect 24 1 25 0;
#X connect 27 0 4 0;
#X connect 27 2 19 0;
