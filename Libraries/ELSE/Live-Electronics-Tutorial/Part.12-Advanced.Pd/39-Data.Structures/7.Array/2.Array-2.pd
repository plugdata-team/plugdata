#N struct 1003-DS float x float y array 1003-table 1003-element;
#N struct 1003-element float y;
#N canvas 214 93 745 362 12;
#X obj 619 224 pointer;
#X obj 359 257 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#N canvas 476 117 533 344 template 0;
#X obj 74 116 struct \$0-DS float x float y array \$0-table \$0-element
;
#X text 50 25 And now we have the Data Structure for the array. It
is named "\$0-DS" and holds the coordinates floats "x/y" and an array
named "\$0-table" using the array's element struct named "\$0-element"
defined in the other subpatch., f 58;
#X text 50 168 The drawing instruction for [plot] now adds more arguments.
Besides the array name we have: a color number for the line (900 \,
red) \, a line width (2) \, x/y coordinates for the location of the
array (0 \, 0) and a horizontal spacing value between the array's elements
(20).;
#X obj 182 270 plot \$0-table 900 3 0 0 30;
#X restore 392 58 pd template;
#X obj 510 253 append \$0-DS x y;
#X obj 359 284 setsize \$0-DS \$0-table;
#N canvas 880 137 486 232 \$0-display 1;
#X scalar 1003-DS 25 75 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \;
0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; \;;
#X coords 0 232 1 231 0 0 0;
#X restore 390 162 pd \$0-display;
#X obj 359 223 r \$0-size;
#X obj 510 214 r \$0-coords;
#X obj 619 197 r \$0-pointer;
#N canvas 325 63 562 376 \$0-element 0;
#X obj 180 147 struct \$0-element float y;
#X text 83 198 Note that the struct name is the same as the subpatch
name. This is required!, f 61;
#X text 77 39 The element of an array specifies the data type the array
includes. It is here defined as a struct of name "\$0-element" containing
only a float named "y". Since 'y' is also the special variable name
for the vertical coordinate \, this means you can drag this element
vertically \, as in Pd's arrays and the example before., f 61;
#X text 105 254 We can also use drawing instructions for each element
in an array. Here we draw a little squared around it:, f 45;
#X obj 131 319 drawpolygon 0 2 -2 -2 2 -2 2 2 -2 2 -2 -2;
#X restore 287 59 pd \$0-element;
#X obj 44 226 initmess \; pd-\$0-display clear \, vis 1 \; \$0-pointer
traverse pd-\$0-display \, bang \; \$0-coords 25 75 \; \$0-size 16
;
#X text 58 99 And here's another interesting new information for Data
Structure Arrays. Note you can press the control/command key before
clicking on a point. If you see the cursor becoming an "X" you can
remove that point. Alternatively \, when an "+" appears \, you can
click and add a new point to the array., f 89;
#X text 58 16 This example gets a little a bit more complicated as
we now have a [struct] to define the element of an array in a separate
subpatch ([pd \$0-element] here). Check the subpatches below for new
information., f 89;
#X connect 0 0 3 2;
#X connect 1 0 4 0;
#X connect 3 0 4 1;
#X connect 6 0 1 0;
#X connect 7 0 3 0;
#X connect 8 0 0 0;
