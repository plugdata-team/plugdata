#N struct 1021-DS float color;
#N struct 1021-fill float color;
#N canvas 457 23 870 360 12;
#X declare -path else;
#X obj 185 278 pointer;
#N canvas 179 223 985 322 template-1 0;
#X obj 611 198 drawpolygon color 20 0 25 95 25;
#X obj 145 270 drawnumber color 100 20 color color=;
#X text 96 45 Data Structure named "\$0-DS" holding a float called
"color"., f 35;
#X obj 120 107 struct \$0-DS float color;
#X text 49 141 The [drawnumber] now has more arguments. Besides the
float name to draw (color) \, we have a pair of "x/y" coordinates (100/20)
and a color value defined by a variable (or "field name") named "color".
The last argument is a label for the number display. Note that the
data structure float has the same name of a field name. In this case
when we set its value we're also setting its color.;
#X text 523 22 And now we also include a shape in the data structure
template which is a simple line drawn with the [drawpolygon] object.
The first argument is a float that defines the color and we use the
same field name "color". Thus \, we also change its color when setting
the float value.;
#X text 523 104 The second argument is the polygon's line width in
pixels (20). The next arguments are coordinate pairs and we just have
two pairs: (0 \, 25) and (95 \, 25) - so a line is drawn to connect
these two dots.;
#X text 533 247 Note that both drawing instructions (for drawing the
number and the line) are part of the same Data Structures template.
This means both drawings form a single graphic object!;
#X restore 144 118 pd template-1;
#N canvas 190 88 438 542 template-2 0;
#X obj 67 171 drawnumber color 105 50 color color=;
#X text 53 142 Draw instructions for the "color" float.;
#X obj 62 474 filledpolygon color 0 5 0 105 100 105 50 60;
#X obj 66 317 drawpolygon color 5 0 5 100 5 50 55 0 5;
#X obj 101 85 struct \$0-fill float color;
#X text 93 38 Data Structure named "\$0-fill" holding a float called
"color"., f 31;
#X text 55 369 The [filledpolygon] needs an extra first argument to
set the internal color and also uses here the 'color' field name for
that. It doesn't need to close the shape with four coordinate points
to draw a triangle - three points is already enough to draw the shape.
, f 44;
#X text 45 212 Here we have a polygon with four coordinate pair points
\, which form a closed triangle. The first argument takes the name
of the 'color' variable (or 'field') \, which is also drawn by [drawnumber].
, f 44;
#X restore 605 134 pd template-2;
#X obj 62 316 append \$0-DS color;
#N canvas 562 477 301 150 \$0-display-1 1;
#X scalar 1021-DS 506 \;;
#X restore 259 118 pd \$0-display-1;
#N canvas 940 449 284 191 \$0-display-2 1;
#X scalar 1021-fill 450 \;;
#X restore 710 134 pd \$0-display-2;
#X msg 191 175 clear \, vis 1;
#X obj 62 251 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 191 202 s pd-\$0-display-1;
#X obj 611 283 pointer;
#X msg 617 186 clear \, vis 1;
#X obj 474 271 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 617 213 s pd-\$0-display-2;
#X obj 474 312 append \$0-fill color;
#X obj 704 22 declare -path else;
#X obj 185 235 message traverse pd-\$0-display-1 \, bang, f 33;
#X msg 62 210 500;
#X msg 474 233 450;
#X obj 611 241 message traverse pd-\$0-display-2 \, bang, f 33;
#X text 446 59 Next \, we draw a bit less simple shapes and also use
the [filledpolygon] object. See the [pd template-2] subpatch for more
details. You can also click and drag the number to change colors.,
f 56;
#X obj 62 175 loadbanger 3;
#X obj 474 174 loadbanger 3;
#X text 79 118 click =>;
#X text 538 134 click =>;
#X text 22 22 We can add shapes to Data structures. Check how we add
a line in the [pd template-1] subpatch with [drawpolygon]. The data
is displayed on the [pd \$0-display-1] subpatch \, click and drag the
number in it to see the color change for both the number and the line.
, f 56;
#X connect 0 0 3 1;
#X connect 6 0 8 0;
#X connect 7 0 3 0;
#X connect 9 0 13 1;
#X connect 10 0 12 0;
#X connect 11 0 13 0;
#X connect 15 0 0 0;
#X connect 16 0 7 0;
#X connect 17 0 11 0;
#X connect 18 0 9 0;
#X connect 20 0 16 0;
#X connect 20 1 15 0;
#X connect 20 2 6 0;
#X connect 21 0 17 0;
#X connect 21 1 18 0;
#X connect 21 2 10 0;
