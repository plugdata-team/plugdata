#N canvas 280 91 855 522 12;
#X declare -path else;
#X obj 166 260 +~;
#X obj 209 262 +~ 1;
#X obj 166 212 sig~ 0;
#X obj 471 165 +~;
#X obj 527 168 +~ 1;
#X obj 471 134 sig~ 0;
#X obj 310 209 setdsp~ 1;
#X text 16 62 All processes in a chain of audio objects are performed "at once" for each block. So if an output signal is inserted back as an input earlier in the chain \, we create an infinite loop \, and the computation of that audio chain is turned off., f 56;
#X obj 484 204 send~ \$0-signal;
#X obj 527 141 receive~ \$0-signal;
#X text 450 34 This example uses [send~] and [receive~] \, where the signal connected to [send~] arrives at [receive~] with a delay of one block \, preventing an infinite loop from happening., f 49;
#X obj 265 25 declare -path else;
#X text 16 145 This happens below \, see how the terminal prints an error that says: "DSP loop detected (some tilde objects not scheduled)".;
#N canvas 871 394 360 263 fb 0;
#X obj 152 71 inlet~;
#X obj 152 148 outlet~;
#X connect 0 0 1 0;
#X restore 618 385 pd fb;
#N canvas 696 70 522 258 subpatch 0;
#X obj 105 62 inlet~;
#X obj 106 174 outlet~;
#X obj 105 95 s~ \$0-x;
#X obj 106 141 r~ \$0-x;
#X text 220 77 Even though the connection is broken inside this subpatch with [send~] and [receive~] \, you still have a feedback loop between subpatches in the parent patch \, so this doesn't work., f 30;
#X connect 0 0 2 0;
#X connect 3 0 1 0;
#X restore 569 353 pd subpatch;
#X text 662 350 <= open subpatch;
#X text 61 260 infinite loop:;
#X obj 166 295 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 471 237 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X text 516 289 The subpatch below has [send~]/[receive~] but it also generates an infinite loop, f 41;
#X text 660 139 <-- loop/feedback with one block delay, f 20;
#X text 16 336 To avoid an infinite loop \, we need to perform a feedback with a delay of one block of audio (also simply known as a "feedback loop"). This can be done with native object pairs such as: [send~]/[receive~] \, [tabsend~]/[tabreceive~] \, [throw~]/[catch~] and also [delwrite~]/[delread~](or)[delread4~] (delay objects)., f 63;
#X text 615 197 For 1 sample feedback loop see:, f 21;
#N canvas 680 23 497 349 1-sample-feedback 0;
#X text 46 28 The default block size is 64 and this is needed for [adc~] and [dac~] objects \, but we usualy need to perform feedback loops with a block size of just 1 sample \, as we'll do in this tutorial in some examples for some DSP algorithms., f 59;
#X obj 273 213 +~ 1;
#X obj 273 182 r~ \$0-fb;
#X obj 298 245 s~ \$0-fb;
#X obj 273 289 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 174 271 switch~ 1;
#X obj 174 243 tgl 19 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X text 46 96 In order to perform a one sample feedback we usually do it in a subpatch like this where we can use [block~] to change the block size to "1" \, then the one block delay will be equal to a single sample. Here we use [switch~] instead of [block~] though.;
#X text 81 220 turn DSP On/Off for this window, f 19;
#X connect 1 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 1 0;
#X connect 6 0 5 0;
#X restore 688 217 pd 1-sample-feedback;
#X text 236 435 This tutorial is following the bleeding edge state of Pd development with a not yet released Pd 0.54 version. Up to 0.53 send~/receive~ and throw~/catch~ only work with a block size of 64!, f 57;
#X connect 0 0 1 0;
#X connect 0 0 17 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 3 0 8 0;
#X connect 3 0 18 0;
#X connect 4 0 3 1;
#X connect 5 0 3 0;
#X connect 9 0 4 0;
#X connect 13 0 14 0;
#X connect 14 0 13 0;
