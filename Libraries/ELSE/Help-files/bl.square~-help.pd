#N canvas 429 30 562 596 10;
#X obj 306 6 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 5 pd;
#X obj 345 13 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 121 42 cnv 4 4 4 empty empty square 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 13 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 13 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 13 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 28 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 28 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 183 42 cnv 4 4 4 empty empty oscillator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 567 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 221 169 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 3 5 cnv 15 301 42 empty empty bl.square~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 5 graph;
#X obj 22 42 cnv 4 4 4 empty empty Bandlimited 0 28 2 18 #e0e0e0 #000000 0;
#X text 23 225 see also:;
#X obj 221 229 else/out~;
#X obj 3 504 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 23 247 else/square~;
#X obj 3 294 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 422 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 122 431 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 122 356 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 122 376 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 206 431 signal -;
#X obj 122 397 cnv 17 3 17 empty empty 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 164 398 float/signal - phase offset (modulation input);
#X text 165 356 float/signal - pulse width (from 0 to 1);
#X text 267 431 square wave signal;
#X text 164 378 float/signal - phase sync (ressets internal phase);
#X text 168 510 1) float;
#X text 168 529 2) float;
#X text 168 547 3) float;
#X text 237 529 - initial pulse width (default 0.5);
#X text 237 547 - initial phase offset (default 0);
#X obj 221 194 else/bl.square~ 400;
#N canvas 670 106 449 354 midi 0;
#X msg 150 150 midi \$1;
#X obj 150 121 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 174 186 7 0 0 0 - - - 0;
#X obj 150 250 else/out~;
#X obj 150 219 else/bl.square~ -midi 60;
#X text 40 27 By default \, frequency input is in hertz \, but if you use the 'midi' message or '-midi' flag you can change it to MIDI pitch input \, where it is not really bound to the 0 to 127 range \, neither it has to be integers. This is just like using [mtof~]...;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 4 0 3 0;
#X restore 484 213 pd midi;
#X obj 3 458 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 237 510 - frequency in midi pitch or hertz (default 0);
#N canvas 739 106 467 416 pulse 0;
#X obj 168 314 else/out~;
#X obj 212 191 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 209 216 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 43 139 The pulse width is set via the first argument or the second inlet.;
#X text 37 22 The pulse width parameter controls how much of the cycle is "1" or "-1". A pulse width of 0.5 means the first half is "1" and the last half is "-1".;
#X text 44 71 A pulse width of 0 has the first sample is "1" and the rest is "-1". Conversely \, a pulse width of 1 has the opposite situation (the entire period is "1" except the last sample \, which is "-1").;
#X obj 209 241 else/float2sig~ 10;
#X obj 168 269 else/bl.square~ 100 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 6 0 7 1;
#X connect 7 0 0 0;
#X restore 443 189 pd pulse width;
#N canvas 463 105 693 353 phase 0;
#X text 398 67 The phase values are wrapped into the 0-1 range \, since the phase cycle is from 0 to 1 - where 1 is also the start of another cycle., f 36;
#X obj 418 219 else/out~;
#X text 543 176 Phase Modulation:;
#X obj 529 149 osc~ 50.05;
#X text 50 25 The third argument sets an initial phase (or "phase offset"). This is also settable with the fourth inlet. In such a way \, you have two objects with the same frequency falling out and back in sync. Another feature is phase modulation., f 51;
#X obj 418 176 else/bl.square~ 200;
#X text 288 121 1;
#X obj 150 121 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 147 146 5 0 0 0 - - - 0;
#X text 128 121 0;
#X obj 154 216 +~;
#X obj 154 253 else/out~;
#X obj 60 172 else/bl.square~ 100 0.5 0.5, f 15;
#X obj 169 179 else/bl.square~ 100;
#X msg 147 98 0.5;
#X connect 3 0 5 3;
#X connect 5 0 1 0;
#X connect 7 0 8 0;
#X connect 8 0 12 3;
#X connect 10 0 11 0;
#X connect 12 0 10 0;
#X connect 13 0 10 1;
#X connect 14 0 7 0;
#X restore 436 261 pd phase offset;
#N canvas 475 51 693 455 sync 0;
#X obj 72 214 vsl 15 100 -1 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 72 182 else/sig2float~;
#X text 349 22 Syncing the phase with control messages is useful for LFOs and control with MIDI. A sync with audio is useful for the "hard sync" technique \, where an oscillator is synced according to the frequency of a master frequency., f 50;
#X obj 389 271 else/out~;
#X obj 463 168 nbx 5 14 110 200 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 564 194 Master oscillator;
#X text 538 229 Slave oscillator;
#X obj 463 194 else/imp~ 110;
#X text 392 344 NOTE:;
#X msg 256 99 0.25;
#X msg 182 98 0.75;
#X msg 150 98 1;
#X msg 222 98 0.5;
#X obj 150 130 else/impseq~;
#X obj 206 223 setdsp~;
#X text 35 343 You can then reset the oscillator with an impulse signal. The impulse values need to be > 0 and <= 1 (otherwise ignored). Because phase is cyclical \, the value of 1 represents the "phase 0" of the cycle \, where the impulse occurs. Send it impulses above and check the result., f 41;
#X msg 389 188 soft \$1;
#X obj 389 163 tgl 16 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 349 87 Soft sync is also possible with the '-soft' flag or the "soft" message \, where it alternates between positive and negative frequencies and sounds less harsh., f 50;
#X text 379 375 The "phase sync" inlet is quite different from the "phase offset" inlet. They are completely independent!, f 43;
#X obj 72 158 else/bl.square~ 0.25;
#X text 39 21 The third inlet resets the phase \, but unlike [square~] \, it has no way to set with control data. This is because that is more suited to low ferquencies., f 41;
#X obj 389 228 else/bl.square~ 200;
#X connect 1 0 0 0;
#X connect 4 0 7 0;
#X connect 7 0 22 2;
#X connect 9 0 13 0;
#X connect 10 0 13 0;
#X connect 11 0 13 0;
#X connect 12 0 13 0;
#X connect 13 0 20 2;
#X connect 16 0 22 0;
#X connect 17 0 16 0;
#X connect 20 0 1 0;
#X connect 22 0 3 0;
#X restore 483 237 pd sync;
#X text 46 88 [bl.square~] is a square oscillator like [else/square~] \, but it is bandlimited. Use [square~] mostly if you need a perfect square wave \, which is usually the case when you want a LFO. The [bl.square~] version is for proper synthesis as it is anti-aliased. This version also has input for pitch in MIDI and no way to sync at control rate., f 71;
#X text 281 168 <- frequency;
#X obj 122 300 cnv 17 3 47 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 164 318 midi <float> -;
#X text 257 318 non zero sets to frequency input in MIDI pitch;
#X text 164 302 float/signal - frequency in hz or midi;
#X text 164 333 soft <float> -;
#X text 257 333 non zero sets to soft sync mode;
#X text 133 481 -soft: sets to soft sync mode (default hard);
#X text 133 466 -midi: sets frequency input in MIDI pitch (default hertz);
#X connect 11 0 35 0;
#X connect 35 0 16 0;
