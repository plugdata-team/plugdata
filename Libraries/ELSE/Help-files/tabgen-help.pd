#N canvas 449 84 559 405 10;
#X obj 1 372 cnv 15 552 21 empty \$0-pddp.cnv.footer empty 20 12 0
14 #dcdcdc #404040 0;
#X obj 1 211 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlets 8 12 0 13
#dcdcdc #000000 0;
#X obj 1 297 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlets 8 12 0
13 #dcdcdc #000000 0;
#X obj 1 327 cnv 3 550 3 empty \$0-pddp.cnv.argument arguments 8 12
0 13 #dcdcdc #000000 0;
#X obj 93 220 cnv 17 3 72 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc
#9c9c9c 0;
#X text 132 336 1) float;
#X text 214 305 (none);
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 22 40 cnv 4 4 4 empty empty Table\\\ generator 0 28 2 18 #e0e0e0
#000000 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 2 3 cnv 15 301 42 empty empty tabgen 20 20 2 37 #e0e0e0 #000000
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#X text 126 352 2) symbol;
#X text 194 336 - (optional) sets array size at initialization, f
48;
#X text 194 352 - set table name (default none), f 48;
#X text 108 247 size <float>;
#X text 132 219 anything;
#X text 108 260 set <symbol>;
#X text 194 260 - sets table name, f 52;
#X text 194 245 - resizes table (needs to re generate table), f 52
;
#X msg 273 131 gauss 0.25;
#X msg 286 156 clear;
#X text 150 275 clear;
#X text 194 275 - clear table, f 52;
#X text 194 219 -;
#X text 59 86 [tabgen] is an abstraction that generates different functions
for a given table name., f 65;
#X obj 73 143 cnv 15 138 48 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-table 256 float 0;
#X coords 0 1 255 0 140 50 1 0 0;
#X restore 72 142 graph;
#N canvas 787 118 289 237 examples 0;
#N canvas 571 149 561 312 gauss 0;
#X msg 67 153 gauss \$1;
#X obj 70 97 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X obj 255 126 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-gauss 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 254 125 graph;
#X text 127 122 sigma;
#X floatatom 67 122 9 0 0 0 - - - 0;
#X obj 67 227 else/tabgen \$0-gauss;
#X msg 85 188 noise \, apply gauss 0.5;
#X text 83 26 The 'gauss <float>' message creates a gaussian function
and the argument sets the sigma value (from 0 to 1). You can also use
the 'apply' command to apply an envelope existing values in a table.
, f 63;
#X connect 0 0 6 0;
#X connect 1 0 5 0;
#X connect 5 0 0 0;
#X connect 7 0 6 0;
#X restore 100 106 pd gauss;
#N canvas 625 135 640 494 sin 0;
#X obj 401 47 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-sin 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 400 46 graph;
#X msg 33 172 sin;
#X msg 92 267 sin 1 1 0.5 2 0.5 0.75;
#X text 61 172 by default it generates a single sinusoid cycle;
#X text 102 196 same as above;
#X text 237 267 summing 2 sinusoids;
#X text 169 292 1/4 cycle;
#X text 212 318 1/4 cycle starting at 0.25 initial phase;
#X text 279 348 summing inharmonic sinusoids;
#X text 285 369 ratios are also allowed;
#X msg 148 399 noise \, apply sin 0.25 0.25;
#X msg 54 196 sin 1;
#X msg 67 219 sin 4;
#X text 106 219 4 cycles (default;
#X msg 79 241 sin 0.5 0.5;
#X obj 79 451 else/tabgen \$0-sin;
#X text 28 18 The 'sin <list>' message creates a series of sinusoids.
Each sinusoid is specified by 3 values \, which are \; - number of
cycles \; - initial phase (0-1) \; - amplitude - default \;, f 56
;
#X text 158 240 half a cycle (doesn't have to be integers) starting
at phase 0.5, f 64;
#X msg 110 292 sin 0.25;
#X msg 123 318 sin 0.25 0.25;
#X msg 135 348 sin 1 0.5 1 2.3 0.25 1;
#X msg 144 370 sin 1/1 0 1/4 7/4 0 1;
#X text 22 82 for a single sinusoid - that is a list of only 3 values
- the phase and amplitude are optional and the default values are \,
respectively \, 0 and 1 \, but for more than 2 sinusoids \, all arguments
are necessary.;
#X text 319 394 You can also use the 'apply' command to apply an envelope
existing values in a table. In this case the 'sin' command takes only
two values which is the number of cycles and initial phase of a single
sinusoid (the amplitude is always 1)., f 49;
#X connect 2 0 16 0;
#X connect 3 0 16 0;
#X connect 11 0 16 0;
#X connect 12 0 16 0;
#X connect 13 0 16 0;
#X connect 15 0 16 0;
#X connect 19 0 16 0;
#X connect 20 0 16 0;
#X connect 21 0 16 0;
#X connect 22 0 16 0;
#X restore 100 163 pd sin;
#N canvas 264 86 523 262 sinc 0;
#X obj 231 102 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-sinc 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 230 101 graph;
#X msg 67 98 sinc 4;
#X obj 67 187 else/tabgen \$0-sinc;
#X msg 82 125 sinc 8;
#X msg 92 155 sinc 8 1;
#X text 67 21 The 'sinc <list>' message draws a sinc function. The
1st argument sets the number of times the function reaches zero on
both sides. An additional optional non zero argument considers only
the right side.;
#X connect 2 0 3 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X restore 100 86 pd sinc;
#N canvas 264 86 449 184 noise 0;
#X obj 194 42 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-noise 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 193 41 graph;
#X msg 45 79 noise;
#X obj 45 122 else/tabgen \$0-noise;
#X text 45 24 The 'noise' message populates the table with noise.,
f 20;
#X connect 2 0 3 0;
#X restore 100 66 pd noise;
#N canvas 470 116 708 331 FFT-windows 0;
#X obj 201 95 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-windows 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 200 94 graph;
#X msg 36 27 hanning;
#X msg 46 51 hamming;
#X text 174 35 These commands draw FFT window functions \, for now
only 'hanning' and 'hamming'., f 41;
#X msg 59 76 blackman;
#X msg 79 125 welch;
#X obj 36 256 else/tabgen \$0-windows;
#X obj 495 168 else/tabgen \$0-windows;
#X msg 515 142 kaiser;
#X msg 495 113 kaiser \$1;
#X obj 498 66 hsl 128 15 3 60 1 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X text 476 25 The kaiser window takes an alpha value argument (default
6), f 32;
#X floatatom 495 89 7 0 0 0 - - - 0;
#X msg 70 101 tri;
#X obj 208 256 else/tabgen \$0-windows;
#X msg 208 228 noise \, apply welch;
#X text 367 232 You can also use the 'apply' command to apply an envelope
existing values in a table with all these windowing functions., f
46;
#X msg 92 174 lanczos;
#X msg 86 150 connes;
#X msg 99 203 sin 0.5;
#X msg 107 229 gauss 0.4;
#X text 151 204 *;
#X text 168 231 *, f 2;
#X text 134 298 * gaussian and sine can also be used to generate FFT
windows., f 62;
#X connect 2 0 7 0;
#X connect 3 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 8 0;
#X connect 11 0 13 0;
#X connect 13 0 10 0;
#X connect 14 0 7 0;
#X connect 16 0 15 0;
#X connect 18 0 7 0;
#X connect 19 0 7 0;
#X connect 20 0 7 0;
#X connect 21 0 7 0;
#X restore 100 183 pd FFT-windows;
#X text 67 21 open subpatches for details on all functions., f 27
;
#N canvas 264 86 528 252 trapezoid 0;
#X obj 292 110 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-trap 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 291 109 graph;
#X msg 66 103 trap 0.1 0.7;
#X msg 86 131 trap 0.5 0.9;
#X msg 96 159 noise \, apply trap 0.5 0.9;
#X obj 66 187 else/tabgen \$0-trap;
#X text 33 21 The 'trapezoid <float \, float>' message creates a trapezoid.
It has a default value of 0.1 and 0.9 and these parameters control
\, respectively \, the phase points where the upwards ramp ends and
the downwards curve starts. You can also use the 'apply' command to
apply an envelope existing values in a table., f 76;
#X connect 2 0 5 0;
#X connect 3 0 5 0;
#X connect 4 0 5 0;
#X restore 100 125 pd trapezoid;
#N canvas 264 86 528 252 vsaw 0;
#X obj 231 102 cnv 15 198 98 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-vsaw 256 float 0;
#X coords 0 1 255 -1 200 100 1 0 0;
#X restore 230 101 graph;
#X msg 41 129 vsaw \$1;
#X obj 44 99 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X obj 41 204 else/tabgen \$0-vsaw;
#X msg 53 169 noise \, apply vsaw 0.8;
#X text 52 21 The 'vsaw <float>' message creates a variable triangle.
It has a default value of 0.5 \, which controls the phase point with
the maximum value. You can also use the 'apply' command to apply an
envelope existing values in a table.;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 5 0 4 0;
#X restore 100 144 pd vsaw;
#X restore 463 181 pd examples;
#X obj 273 181 else/tabgen \$0-table;
#X text 206 219 commands to generate functions: (details in [pd examples])
, f 41;
#X connect 26 0 35 0;
#X connect 27 0 35 0;
