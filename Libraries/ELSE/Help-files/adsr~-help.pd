#N canvas 459 23 561 711 10;
#X obj 5 362 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 527 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 610 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 684 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 95 535 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 95 369 cnv 17 3 62 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 167 535 signal;
#X obj 24 41 cnv 4 4 4 empty empty Attack/Decay/Sustain/Release 0 28 2 18 #e0e0e0 #000000 0;
#X obj 249 41 cnv 4 4 4 empty empty gated 0 28 2 18 #e0e0e0 #000000 0;
#X obj 95 438 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 439 float/signal;
#X obj 147 300 else/out~;
#X obj 147 263 *~;
#X obj 267 268 vsl 18 80 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 267 241 else/sig2float~;
#X text 290 341 0;
#X text 290 264 1;
#X obj 3 4 cnv 15 301 42 empty empty adsr~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X text 216 438 - attack time in ms, f 43;
#X obj 95 459 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 460 float/signal;
#X text 216 535 - envelope signal;
#X obj 162 161 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 299 41 cnv 4 4 4 empty empty envelope 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 90 210 osc~ 440;
#X text 217 369 - gate values, f 43;
#X obj 216 180 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 271 180 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 217 162 attack;
#N canvas 486 183 804 473 example 0;
#X obj 553 293 *~;
#X obj 553 375 else/out~;
#X obj 553 333 else/lowpass~ 0 20;
#X obj 605 272 else/rescale~ 100 1500;
#X obj 605 102 else/randpulse~ 0.5;
#X obj 605 214 else/adsr~ 100 300 0.7 100;
#X text 425 21 [adsr~] accepts any gate value \, positive or negative and above 1 or below -1 \, so you can use it to control anything besides amplitude.;
#X obj 178 97 else/tempo 120 100 -on;
#X obj 222 320 catch~ \$0-voice;
#X obj 110 389 clone;
#X text 88 344 see also:;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 313 163 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 313 215 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 178 103 / 127;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 178 131 else/adsr~ 10 40 0.5 50;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/bl.vsaw~;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 9 0;
#X connect 4 0 10 0;
#X connect 5 0 8 0;
#X connect 6 0 4 0;
#X connect 6 1 5 0;
#X connect 7 0 10 1;
#X connect 8 0 3 1;
#X connect 8 1 1 0;
#X connect 10 0 3 0;
#X restore 204 287 pd voice1;
#X obj 339 171 tgl 22 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040 #000000 0 1;
#X obj 178 142 else/display;
#X obj 204 199 else/suspedal -retrig 1;
#X text 295 174 On/Off;
#X obj 178 172 makenote 127 150;
#N canvas 47 291 438 299 voice2 0;
#X obj 72 37 inlet;
#X obj 312 154 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 312 206 switch~;
#X obj 162 200 *~;
#X obj 72 101 mtof;
#X obj 177 94 / 127;
#X obj 72 68 unpack float float;
#X obj 97 135 osc~ 0.125;
#X obj 177 122 else/adsr~ 10 40 0.5 50;
#X obj 162 232 throw~ \$0-voice;
#X obj 72 164 else/bl.vsaw~;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 9 0;
#X connect 4 0 10 0;
#X connect 5 0 8 0;
#X connect 6 0 4 0;
#X connect 6 1 5 0;
#X connect 7 0 10 1;
#X connect 8 0 3 1;
#X connect 8 1 1 0;
#X connect 10 0 3 0;
#X restore 277 287 pd voice2;
#X text 26 17 Here we have randomly generated notes into a sustain pedal and then feeding a [voice] object with 2 voices. Also see that each voice subpatch has [adsr~]'s status outlet to control a DSP switch for that subpatch - open and check it. You should also try pd's [clone] object for managing polyphonic synths.;
#X obj 74 366 else/voices;
#X text 152 287 open =>;
#X obj 459 220 else/bl.saw~;
#X obj 277 253 else/display;
#X obj 204 253 else/display;
#X obj 222 349 else/plate.rev~ 50 0.75 0.5 0.5 0.5, f 18;
#X obj 178 120 else/rand.i 48 72;
#X obj 459 148 else/rand.f~ 50 150;
#X obj 233 395 else/out~;
#X obj 204 225 else/voices -retrig 1 2 1;
#X text 674 171 <-- gate value;
#X text 675 300 <-- cutoff;
#X text 529 174 <-- Hz;
#X obj 459 174 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 300 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 34 0;
#X connect 4 0 26 0;
#X connect 4 0 33 0;
#X connect 5 0 0 1;
#X connect 5 0 3 0;
#X connect 7 0 25 0;
#X connect 8 0 24 0;
#X connect 12 0 14 2;
#X connect 13 0 16 0;
#X connect 14 0 28 0;
#X connect 14 1 28 1;
#X connect 16 0 14 0;
#X connect 16 1 14 1;
#X connect 21 0 0 0;
#X connect 22 0 17 0;
#X connect 23 0 11 0;
#X connect 24 0 27 0;
#X connect 24 1 27 1;
#X connect 25 0 13 0;
#X connect 26 0 32 0;
#X connect 28 0 23 0;
#X connect 28 1 22 0;
#X connect 32 0 21 0;
#X connect 33 0 5 0;
#X connect 34 0 2 1;
#X restore 484 327 pd example;
#X obj 326 180 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 381 180 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 383 162 release;
#X text 273 162 decay;
#X text 327 162 sustain;
#X text 23 286 see also:;
#X obj 23 305 else/asr~;
#X obj 95 481 cnv 17 3 17 empty empty 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 482 float/signal;
#X obj 95 503 cnv 17 3 17 empty empty 4 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 504 float/signal;
#X text 216 503 - release time in ms, f 43;
#X text 216 459 - decay time in ms, f 43;
#X text 216 481 - sustain amplitude (ratio to gate value), f 43;
#X text 129 163 gate;
#N canvas 786 244 383 359 triggered 0;
#X obj 151 271 else/out~;
#X obj 166 71 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 151 229 *~;
#X obj 84 169 else/brown~;
#X obj 166 201 else/adsr~ 50 100 0.5 500;
#X obj 166 100 else/tempo~ 60;
#X obj 166 137 else/timed.gate~ 500;
#X text 28 17 You can use the [timed.gate~] object to create a timed gate so you can trigger the envelope with an impulse., f 54;
#X text 104 118 impulse =>;
#X text 205 166 <-- gate value;
#X obj 166 166 else/numbox~ 2 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 1 0 5 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 6 0 10 0;
#X connect 10 0 4 0;
#X restore 466 294 pd triggered \; by impulses;
#X obj 381 233 tgl 19 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 381 260 else/display;
#X obj 95 556 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 174 556 float;
#N canvas 789 187 414 411 status 0;
#X obj 288 306 switch~;
#X obj 288 238 tgl 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 71 266 *~;
#X obj 49 204 osc~ 440;
#X obj 181 254 else/sig2float~;
#X obj 181 290 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 335 127 else/setdsp~;
#X obj 129 202 else/adsr~ 100 300 0.25 500;
#X text 19 16 [adsr~] has a right outlet that sends a status value (1 when the envelope starts and 0 when it ends). This can be useful for different things \, but particularly to turn on and off the DSP processing of a subpatch or abstraction with [switch~]., f 62;
#X text 19 67 In the case of turning [switch~] on or off \, this only works for control data input \, because if the audio engine is off you can't use it to turn it on., f 62;
#X obj 71 311 else/out~;
#X msg 143 161 0;
#X text 162 133 gate on;
#X text 171 160 gate off;
#X msg 129 134 127;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 7 0 2 1;
#X connect 7 0 4 0;
#X connect 7 1 1 0;
#X connect 11 0 7 0;
#X connect 14 0 7 0;
#X restore 490 231 pd status;
#X text 216 556 - envelope status (on: 1 / off: 0);
#X obj 162 208 else/adsr~ 1000 500 0.5 1000, f 37;
#X text 179 402 bang;
#X text 217 402 - trigger/retrigger, f 46;
#N canvas 553 121 665 515 retrigger 0;
#X obj 70 262 *~;
#X obj 47 200 osc~ 440;
#X obj 188 239 else/sig2float~;
#X obj 188 272 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 127 138 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 95 139 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 69 312 else/out~;
#X text 156 116 <= click multiple times;
#X obj 551 78 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 416 110 else/suspedal -retrig 1;
#X obj 416 166 else/display;
#X obj 466 286 *~;
#X obj 416 254 osc~ 440;
#X obj 466 322 else/out~;
#X obj 416 227 mtof;
#X obj 481 249 else/adsr~ 100 300 0.5 500;
#X obj 416 199 unpack;
#X obj 551 53 loadbang;
#X text 16 13 You can retrigger the envelope with a bang or with a float value. With float values you don't need to turn the gate off before retriggering the envelope \, so even repeated values make the envelope restart the attack ramp. Try it below or on the right.;
#X obj 416 12 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 416 140 else/voices -retrig 1 1 1;
#X msg 127 118 127;
#X obj 127 188 else/adsr~ 100 300 0.25 500;
#X text 16 75 A bang considers the last non zero float value as the gate value \, and the default value is "127"!, f 60;
#X floatatom 127 165 5 0 0 0 - - - 0;
#X msg 63 142 0;
#X text 86 424 Note: the [envgen~] object has a retrigger mode which allows you to set a retrigger time in ms. Hence \, if you want to have a more versatile ADSR object with this functionality \, please use this more general and all purpose envelope generator. Check its help file for more details on how its retrigger mode works., f 89;
#X obj 425 470 else/envgen~;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 4 0 24 0;
#X connect 5 0 22 0;
#X connect 8 0 9 2;
#X connect 9 0 20 0;
#X connect 9 1 20 1;
#X connect 10 0 16 0;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 14 0 12 0;
#X connect 15 0 11 1;
#X connect 16 0 14 0;
#X connect 16 1 15 0;
#X connect 17 0 8 0;
#X connect 19 0 9 0;
#X connect 20 0 10 0;
#X connect 21 0 4 0;
#X connect 22 0 0 1;
#X connect 22 0 2 0;
#X connect 24 0 22 0;
#X connect 25 0 22 0;
#X restore 472 272 pd retrigger;
#X obj 162 186 sig~;
#X obj 5 582 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 68 88 [adsr~] is an attack/decay/sustain/release gated envelope. At a gate on (transition from 0 to any value) \, the attack ramp is generated \, then a decay ramp goes to the sustain point (specified as a ratio of the gate value). A gate off (transition from any value to 0) makes [adsr~] go to 0 at the specified release time in ms., f 68;
#X obj 381 294 sel 0;
#X obj 381 322 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 406 326 done;
#N canvas 707 84 494 456 lin 0;
#X obj 409 181 else/setdsp~;
#X text 349 106 see also:;
#X obj 49 287 cnv 15 398 138 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-log 441 float 0;
#X coords 0 1 440 0 400 140 1 0 0;
#X restore 48 286 graph;
#X obj 120 115 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 56 140 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 133 152 else/timed.gate~ 6;
#X obj 349 127 else/lag~;
#X obj 121 244 tabwrite~ \$0-log;
#X text 143 116 <= click;
#X text 341 194 turn on =>;
#X obj 133 201 else/adsr~ -lin 1.5 2 0.5 4;
#X msg 56 161 lin \$1;
#X text 41 19 The [adsr~] object can operate in "lin" (linear) mode \, set with the -lin flag or "lin" message. By defqult \, [adsr~] is logarithmic \, this mode implements a one pole filter \, much like the [lag~] object. This is a non-liner mode that simulates how analog gear work. The attack or release time represent how long it takes for the signal to converge to within 0.01% of the target value., f 68;
#X connect 4 0 6 0;
#X connect 4 0 8 0;
#X connect 5 0 12 0;
#X connect 6 0 11 0;
#X connect 11 0 8 0;
#X connect 12 0 11 0;
#X restore 508 252 pd lin;
#X text 137 417 lin <float>;
#X text 217 417 - non zero sets to "lin" mode \, "log" otherwise;
#X text 111 616 1) float - attack time in ms (default 10), f 61;
#X text 111 631 2) float - decay time in ms (default 10), f 61;
#X text 111 647 3) float - sustain amplitude ratio to gate value (default 1), f 61;
#X text 111 663 4) float - release time in ms (default 10), f 61;
#X text 167 369 signal;
#X text 173 386 float;
#N canvas 687 174 481 424 float 0;
#X obj 56 290 *~;
#X obj 166 293 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 114 226 else/adsr~ 100 300 0.25 500;
#X obj 56 335 else/out~;
#X obj 56 80 else/keyboard 17 80 3 4 0 0 empty empty;
#X obj 56 169 unpack;
#X floatatom 114 196 5 0 0 0 - - - 16;
#X obj 56 202 mtof;
#X obj 56 228 osc~;
#X obj 166 267 else/s2f~;
#X text 71 18 Float gate values are possible but the MIDI velocity range is considered \, so 0-127 is the same as 0-1 in signal values (float values and values outside this range is possible), f 54;
#X connect 0 0 3 0;
#X connect 2 0 0 1;
#X connect 2 0 9 0;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 5 1 6 0;
#X connect 6 0 2 0;
#X connect 7 0 8 0;
#X connect 8 0 0 0;
#X connect 9 0 1 0;
#X restore 495 210 pd float;
#X text 217 386 - gate values in MIDI velocity range (0-127 is 0-1);
#X obj 23 327 else/envgen~;
#X text 163 592 -lin: sets to lin mode (default 'log');
#X connect 12 0 11 0;
#X connect 14 0 13 0;
#X connect 23 0 65 0;
#X connect 33 0 12 0;
#X connect 35 0 61 1;
#X connect 36 0 61 2;
#X connect 39 0 61 3;
#X connect 40 0 61 4;
#X connect 55 0 56 0;
#X connect 56 0 68 0;
#X connect 61 0 12 1;
#X connect 61 0 14 0;
#X connect 61 1 55 0;
#X connect 65 0 61 0;
#X connect 68 0 69 0;
