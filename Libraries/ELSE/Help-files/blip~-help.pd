#N canvas 609 30 563 657 10;
#X floatatom 154 171 5 0 0 0 - - - 0;
#X text 114 171 hertz;
#X obj 154 235 else/out~;
#X floatatom 253 178 5 0 0 0 - - - 0;
#X obj 256 156 hsl 128 15 -2 2 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 40 cnv 4 4 4 empty empty Band-limited\ cosine\ sum\ oscillator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 2 3 cnv 15 301 42 empty empty blip~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#X obj 5 626 cnv 15 552 21 empty \$0-pddp.cnv.footer empty 20 12 0 14 #dcdcdc #404040 0;
#X obj 5 301 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 461 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 548 cnv 3 550 3 empty \$0-pddp.cnv.argument arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 118 309 cnv 17 3 75 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 118 393 cnv 17 3 17 empty \$0-pddp.cnv.let.1 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 130 558 1) float;
#X text 130 574 2) float;
#X text 155 309 float/signal;
#X text 236 309 - fundamental frequency in hertz;
#X obj 117 472 cnv 17 3 17 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 130 590 3) float;
#X text 130 606 4) float;
#X text 190 472 signal;
#X text 235 472 - band limited oscillator output;
#X text 192 574 - number of partials (default 1);
#X text 192 606 - lowest harmonic (default 1);
#X text 236 324 - number of partials;
#X text 236 340 - lowest harmonic;
#N canvas 413 39 596 600 details 0;
#X obj 164 95 else/rescale~ 190 210, f 23;
#X obj 164 71 osc~ 0.23;
#X obj 164 285 else/graph~ 441 13 -1 1 200 140 #dfdfdf 0 1;
#X obj 164 439 else/spectrograph~ 1024 0 1 300 140 100;
#X text 372 396 waveform;
#X text 474 550 spectrograph;
#X floatatom 49 19 5 1 10 0 - - - 0;
#X text 85 19 lowest harmonic;
#X floatatom 107 44 5 1 10 0 - - - 0;
#X text 143 42 number of partials;
#X msg 107 64 n \$1;
#X obj 251 177 osc~ 0.033;
#X msg 49 43 low \$1;
#X text 351 31 If the fundamental frequency input is '100' \, the number of harmonics is 2 and the lowest harmonic is 1 \, then you have '100' and '200' as the partial's frequencies. Now \, if the lowest harmonic is 2 \, then you have '200' and '300'., f 34;
#X obj 164 248 else/blip~ 0 20;
#X text 351 122 The spectral multiplier 'm' is a factor that scales each successive harmonic by. If m = 0.5 and you start with 1st harmonic and ask for 4 harmonics \, you get 1 \, 0.5 \, 0.25 and 0.125 as the amplitude list. A factor of 1 creates an impulse like waveform. Negative values and vaues outside the -1 and 1 range is possible., f 34;
#X obj 52 313 else/out~;
#X text 218 204 Hz;
#X text 304 204 'm';
#X obj 164 202 else/numbox~ 4 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 251 202 else/numbox~ 4 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 0 0 19 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 6 0 12 0;
#X connect 8 0 10 0;
#X connect 10 0 14 0;
#X connect 11 0 20 0;
#X connect 12 0 14 0;
#X connect 14 0 2 0;
#X connect 14 0 16 0;
#X connect 19 0 14 0;
#X connect 20 0 14 3;
#X restore 465 184 pd details;
#X text 173 324 n <float>;
#X text 161 340 low <float>;
#X obj 154 205 else/blip~ 100 10;
#X text 192 590 - spectral multiplier (default 1 \, impulse like);
#X obj 118 415 cnv 17 3 17 empty \$0-pddp.cnv.let.1 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 155 417 float/signal;
#X text 191 395 signal;
#X text 235 395 - impulses reset phase;
#X obj 118 437 cnv 17 3 17 empty \$0-pddp.cnv.let.1 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 235 439 - spectral multiplier;
#X text 155 439 float/signal;
#X text 235 417 - phase modulation input;
#N canvas 675 59 382 549 +details 0;
#X obj 77 287 else/graph~ 441 13 -1 1 200 140 #dfdfdf 0 1;
#X obj 142 107 sig~ 100;
#X obj 77 192 *~ 1.5;
#X obj 207 169 *~ 0.5;
#X obj 207 192 osc~;
#X obj 207 216 *~ 0.3;
#X obj 77 251 else/blip~ 0 20, f 33;
#X obj 142 192 else/imp~;
#X text 45 17 This example also uses the 2nd inlet for hard sync and 3rd inlet for phase modulation. Note that both of these generate aliasing., f 45;
#X obj 272 192 else/tri~ 1;
#X floatatom 142 81 5 0 0 0 - - - 0;
#X obj 77 459 else/out~;
#X connect 0 0 11 0;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 1 0 7 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 2;
#X connect 6 0 0 0;
#X connect 7 0 6 1;
#X connect 9 0 6 3;
#X connect 10 0 1 0;
#X restore 459 268 pd +details;
#X text 289 178 spectral multiplier;
#X text 40 86 [blip~] uses DSF (Discrete-Summation Formulae) to generate waveforms as a sum of cosines. It takes a frequency in hertz for the fundamental \, a number of harmonics \, a multiplier for the partials after the first one and the lowest harmonic number (by default it generates an impulse waveform). This object is based on Csound's 'gbuzz' opcode., f 82;
#X text 192 558 - fundamental frequency in hertz or midi (default 0);
#N canvas 670 106 449 338 midi 0;
#X msg 150 150 midi \$1;
#X obj 150 121 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 174 186 7 0 0 0 - - - 0;
#X obj 150 250 else/out~;
#X obj 150 219 else/blip~ -midi 60 20;
#X text 40 27 By default \, frequency input is in hertz \, but if you use the 'midi' message or '-midi' flag you can change it to MIDI pitch input \, where it is not really bound to the 0 to 127 range \, neither it has to be integers. This is just like using [mtof~]...;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 4 0 3 0;
#X restore 483 205 pd midi;
#N canvas 494 66 707 453 sync 0;
#X obj 92 214 vsl 15 100 -1 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 92 182 else/sig2float~;
#X text 349 22 Syncing the phase with control messages is useful for LFOs and control with MIDI. A sync with audio is useful for the "hard sync" technique \, where an oscillator is synced according to the frequency of a master frequency., f 50;
#X obj 429 266 else/out~;
#X obj 460 168 nbx 5 14 110 200 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 561 194 Master oscillator;
#X text 539 225 Slave oscillator;
#X obj 460 194 else/imp~ 110;
#X text 377 347 NOTE:;
#X msg 229 99 0.25;
#X msg 155 98 0.75;
#X msg 123 98 1;
#X msg 195 98 0.5;
#X obj 123 130 else/impseq~;
#X obj 206 223 setdsp~;
#X text 39 21 The second inlet resets the phase \, but unlike [saw~] \, it has no way to set with control data. This is because that is more suited to low ferquencies., f 41;
#X text 35 343 You can then reset the oscillator with an impulse signal. The impulse values need to be > 0 and <= 1 (otherwise ignored). Because phase is cyclical \, the value of 1 represents the "phase 0" of the cycle \, where the impulse occurs. Send it impulses above and check the result., f 41;
#X msg 393 188 soft \$1;
#X obj 393 163 tgl 16 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 349 87 Soft sync is also possible with the '-soft' flag or the "soft" message \, where it alternates between positive and negative frequencies and sounds less harsh., f 50;
#X text 379 375 The "phase sync" inlet is quite different from the "phase offset" inlet. They are completely independent!, f 43;
#X obj 92 158 else/blip~ 0.5 5;
#X obj 429 224 else/blip~ 250 5;
#X connect 1 0 0 0;
#X connect 4 0 7 0;
#X connect 7 0 22 1;
#X connect 9 0 13 0;
#X connect 10 0 13 0;
#X connect 11 0 13 0;
#X connect 12 0 13 0;
#X connect 13 0 21 1;
#X connect 17 0 22 0;
#X connect 18 0 17 0;
#X connect 21 0 1 0;
#X connect 22 0 3 0;
#X restore 483 226 pd sync;
#N canvas 641 185 707 361 phase 0;
#X obj 455 218 else/out~;
#X text 540 169 Phase Modulation:;
#X obj 501 135 osc~ 50.01;
#X text 414 42 The phase values are wrapped into the 0-1 range \, since the phase cycle is from 0 to 1 (where 1 is also the start of another cycle)., f 33;
#X obj 455 165 else/blip~ 200 5, f 12;
#X obj 123 257 else/out~;
#X obj 123 221 +~;
#X text 335 120 1;
#X obj 203 120 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 200 144 4 0 0 0 - - - 0;
#X text 183 120 0;
#X obj 200 168 else/float2sig~ 10;
#X text 30 33 The third inlet sets "phase offset" \, which allows you to control two oscillators with the same frequency falling in and out of phase. Another feature is phase modulation., f 53;
#X obj 80 156 else/blip~ 200 5;
#X obj 138 194 else/blip~ 200 5;
#X connect 2 0 4 2;
#X connect 4 0 0 0;
#X connect 6 0 5 0;
#X connect 8 0 9 0;
#X connect 9 0 11 0;
#X connect 11 0 14 2;
#X connect 13 0 6 0;
#X connect 14 0 6 1;
#X restore 411 247 pd phase modulation;
#X text 143 354 midi <float> -;
#X text 243 354 non zero sets to frequency input in MIDI pitch;
#X text 143 370 soft <float> -;
#X text 243 370 non zero sets to soft sync mode;
#X obj 3 502 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 133 525 -soft: sets to soft sync mode (default hard);
#X text 133 510 -midi: sets frequency input in MIDI pitch (default hertz);
#X connect 0 0 38 0;
#X connect 3 0 38 3;
#X connect 4 0 3 0;
#X connect 38 0 2 0;
